# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Deploy to Amazon ECS

on:
  release:
    types: [ created ]
  # TEST: For validating workflow 
  push:
    branches:
      - feature/add-workflow

env:
  AWS_REGION: eu-west-2 
  ECR_ENVOY_REPOSITORY: refme-envoy-container     
  ECR_API_REPOSITORY: refme-api-v2-container      
  ECS_TASK_DEFINITION: .aws/service-task-definition.json
  ECS_SERVICE: refme-api-service 
  ECS_CLUSTER: personal-projects 

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push Envoy to Amazon ECR
        id: build-envoy-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_ENVOY_REPOSITORY:$IMAGE_TAG envoy/
          docker push $ECR_REGISTRY/$ECR_ENVOY_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_ENVOY_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push API to Amazon ECR
        id: build-api-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_API_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_API_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_API_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID for Envoy in the Amazon ECS task definition
        id: task-def-envoy
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.ECR_ENVOY_REPOSITORY }}
          image: ${{ steps.build-envoy-image.outputs.image }}

      - name: Fill in the new image ID for the API in the Amazon ECS task definition
        id: task-def-api
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ steps.task-def-envoy.outputs.task-definition }} 
          container-name: ${{ env.ECR_API_REPOSITORY }}
          image: ${{ steps.build-api-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def-api.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true