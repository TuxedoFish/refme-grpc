# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Deploy to Amazon ECS

on:
  release:
    types: [ created ]

env:
  AWS_REGION: eu-west-2 
  ECR_ENVOY_REPOSITORY: refme-envoy-container     # set this to your Amazon ECR repository name
  ECR_API_REPOSITORY: refme-api-v2-container      # set this to your Amazon ECR repository name

defaults:
  run:
    shell: bash

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      # Checkout the files
      - name: Checkout
        uses: actions/checkout@v2

      # Use GitHub secrets to configure credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to ECR using aws-actions
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      # Build and tag the envoy image and push them to AWS
      - name: Build, tag, and push envoy to Amazon ECR
        id: build-envoy-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_ENVOY_REPOSITORY:$IMAGE_TAG envoy/
          docker push $ECR_REGISTRY/$ECR_ENVOY_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_ENVOY_REPOSITORY:$IMAGE_TAG"

      # Build and tag the api image and push them to AWS
      - name: Build, tag, and push envoy to Amazon ECR
        id: build-api-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_API_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_API_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_API_REPOSITORY:$IMAGE_TAG"
